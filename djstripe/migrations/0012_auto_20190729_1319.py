# Generated by Django 2.2.3 on 2019-07-29 13:19

from django.db import migrations, models
import django.db.models.deletion
import djstripe.enums
import djstripe.fields


class Migration(migrations.Migration):

    dependencies = [
        ('djstripe', '0011_charge_payment_intent'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='paymentintent',
            name='invoice',
        ),
        migrations.RemoveField(
            model_name='paymentintent',
            name='review',
        ),
        migrations.AddField(
            model_name='invoice',
            name='payment_intent',
            field=models.OneToOneField(help_text='The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice.Note that voiding an invoice will cancel the PaymentIntent', null=True, on_delete=django.db.models.deletion.CASCADE, to='djstripe.PaymentIntent'),
        ),
        migrations.AlterField(
            model_name='paymentintent',
            name='customer',
            field=models.ForeignKey(help_text='Customer this PaymentIntent is for if one exists.', null=True, on_delete=django.db.models.deletion.CASCADE, to='djstripe.Customer'),
        ),
        migrations.AlterField(
            model_name='paymentintent',
            name='payment_method',
            field=models.ForeignKey(help_text='Payment method used in this PaymentIntent.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.PaymentMethod'),
        ),
        migrations.AlterField(
            model_name='paymentintent',
            name='setup_future_usage',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.IntentUsage, help_text='Indicates that you intend to make future payments with thisPaymentIntentâ€™s payment method.If present, the payment method used with this PaymentIntent canbe attached to a Customer, even after the transaction completes.Use `on_session` if you intend to only reuse the payment methodwhen your customer is present in your checkout flow. Use `off_session`if your customer may or may not be in your checkout flow.Stripe uses `setup_future_usage` to dynamically optimize your payment flow andcomply with regional legislation and network rules. For example,if your customer is impacted by SCA, using `off_session` willensure that they are authenticated while processing this PaymentIntent.You will then be able to make later off-session payments for this customer.', max_length=11),
        ),
        migrations.AlterField(
            model_name='paymentmethod',
            name='customer',
            field=models.ForeignKey(blank=True, help_text='Customer to which this PaymentMethod is saved.This will not be set when the PaymentMethod has not been saved to a Customer.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_methods', to='djstripe.Customer'),
        ),
        migrations.AlterField(
            model_name='payout',
            name='destination',
            field=models.ForeignKey(help_text='Bank account or card the payout was sent to.', null=True, on_delete=django.db.models.deletion.PROTECT, to='djstripe.BankAccount'),
        ),
        migrations.AlterField(
            model_name='session',
            name='customer',
            field=models.ForeignKey(help_text='Customer this Checkout is for if one exists.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.Customer'),
        ),
        migrations.AlterField(
            model_name='session',
            name='payment_intent',
            field=models.ForeignKey(help_text='PaymentIntent created if SKUs or line items were provided.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.PaymentIntent'),
        ),
        migrations.AlterField(
            model_name='session',
            name='subscription',
            field=models.ForeignKey(help_text='Subscription created if one or more plans were provided.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.Subscription'),
        ),
        migrations.AlterField(
            model_name='setupintent',
            name='customer',
            field=models.ForeignKey(help_text='Customer this SetupIntent belongs to, if one exists.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.Customer'),
        ),
        migrations.AlterField(
            model_name='setupintent',
            name='payment_method',
            field=models.ForeignKey(help_text='Payment method used in this PaymentIntent.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.PaymentMethod'),
        ),
    ]
